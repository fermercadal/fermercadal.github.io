/**
 * @param treshold
 * @param multitouch
 * @param onSwipeNext = function (direction) {}
 * @param onSwipePrev = function (direction) {}
 */

var StoryCLMNavigation = function (data) {
    if (this instanceof StoryCLMNavigation) {
        var self = this;

        data = data || {};
        this.isSwipeAllBlock = false;
        this.isSwipePrevBlock = false;
        this.isSwipeNextBlock = false;
        this.isCanSwipeBackward = false;

        var next = document.querySelector('meta[name="clm-swipe-next"]').getAttribute('content');
        var previous = document.querySelector('meta[name="clm-swipe-previous"]').getAttribute('content');

        var swipeEl = document.getElementById("slideContainer");
        var direction = 0;

        this.swObj = new Hammer(swipeEl);

        this.swObj.get('pan').set({
            threshold: data.threshold || 200,
            pointers: data.swipePointsCount || 1
        });

        this.swObj.on('panleft', function () {
            if (self.isSwipeAllBlock || self.isSwipeNextBlock) return false;
            direction = 1;
        });

        this.swObj.on('panright', function () {
            if (self.isCanSwipeBackward) direction = 3;
            if (self.isSwipeAllBlock || self.isSwipePrevBlock) return false;
            direction = 2;
        });

        this.swObj.on('panend', function () {
            if (direction == 1) {
                direction = 0;
                self.isEmptyMeta(next) ? self.onSwipeNext(false) : self.onSwipeNext(next);
            } else if (direction == 2) {
                direction = 0;
                self.isEmptyMeta(previous) ? self.onSwipePrev(false) : self.onSwipePrev(previous);
            } else if (direction == 3) {
                self.onSwipeBackward(1);
            }
        });
    } else {
        return new StoryCLMNavigation(treshold);
    }
};

StoryCLMNavigation.prototype = {
/**
* Blocks all navigation
*/
    block: function (bool) {
        var self = this;

        if (bool === true) {
            self.isSwipeAllBlock = bool;
        } else {
            //mini-timeout so as not to work panend
            setTimeout(function () {
                self.isSwipeAllBlock = false;
            }, 50);
        }
    },

    /**
     * Blocks forward navigation
     */
    blockNext: function (bool) {
        var self = this;

        if (bool === true) {

            self.isSwipeNextBlock = bool;
        } else {
            //mini-timeout so as not to work panend
            setTimeout(function () {
                self.isSwipeNextBlock = false;
            }, 50);
        }
    },

    /**
     * Blocks navigation back
     */
    blockPrev: function (bool) {
        var self = this;

        if (bool === true) {
            self.isSwipePrevBlock = bool;
        } else {
            //mini-timeout so as not to work panend
            setTimeout(function () {
                self.isSwipePrevBlock = false;
            }, 50);
        }
    },

    /**
     * Disposable Panels
     */
    blockSwipe: function () {
        this.swObj.stop();
    },

    /**
     * Check for next / previous slide
     */
    isEmptyMeta: function (direction) {
        return !direction.length;
    },

    /**
     * Swipe forward by default
     */
    onSwipeNext: function (direction) {
        window.location = direction;
    },

    /**
     * Swipe back to default
     */
    onSwipePrev: function (direction) {
        window.location = direction;
    },

    /**
     * Swipe back to the default story
     */
    onSwipeBackward: function (count) {
    }
};